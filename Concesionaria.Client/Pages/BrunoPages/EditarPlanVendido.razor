@page "/api/PlanVendido/editar"
@inject IHttpServicio http
@inject NavigationManager navigationManager

<h3>Editar Plan Vendido</h3>

<EditForm Model="planVendido" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    
    <!-- Campo para introducir el ID del Plan Vendido -->
    <div class="form-group">
        <label>ID del Plan Vendido</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@planVendidoId" />
            <ValidationMessage For="@(() => planVendidoId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha Suscripción</label>
        <div>
            <InputDate class="form-control" @bind-Value="@planVendido.FechaSuscripcion" />
            <ValidationMessage For="@(() => planVendido.FechaSuscripcion)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha Sorteo</label>
        <div>
            <InputDate class="form-control" @bind-Value="@planVendido.FechaSorteo" />
            <ValidationMessage For="@(() => planVendido.FechaSorteo)" />
        </div>
    </div>

    <div class="form-group">
        <label>Descripción</label>
        <div>
            <InputText class="form-control" @bind-Value="@planVendido.Descripcion" />
            <ValidationMessage For="@(() => planVendido.Descripcion)" />
        </div>
    </div>

    <div class="form-group">
        <label>Estado</label>
        <div>
            <InputText class="form-control" @bind-Value="@planVendido.Estado" />
            <ValidationMessage For="@(() => planVendido.Estado)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha Inicio</label>
        <div>
            <InputDate class="form-control" @bind-Value="@planVendido.FechaInicio" />
            <ValidationMessage For="@(() => planVendido.FechaInicio)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha Fin</label>
        <div>
            <InputDate class="form-control" @bind-Value="@planVendido.FechaFin" />
            <ValidationMessage For="@(() => planVendido.FechaFin)" />
        </div>
    </div>

    <div class="form-group">
        <label>¿El plan tiene mora?</label>
        <div>
            <InputCheckbox @bind-Value="planVendido.PlanEnMora" />
            <ValidationMessage For="@(() => planVendido.PlanEnMora)" />
        </div>
    </div>

    <div class="form-group">
        <label>Tipo de Plan ID</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@planVendido.TipoPlanId" />
            <ValidationMessage For="@(() => planVendido.TipoPlanId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Vendedor ID</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@planVendido.VendedorId" />
            <ValidationMessage For="@(() => planVendido.VendedorId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Cliente ID</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@planVendido.ClienteId" />
            <ValidationMessage For="@(() => planVendido.ClienteId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Adjudicación ID</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@planVendido.AdjudicacionId" />
            <ValidationMessage For="@(() => planVendido.AdjudicacionId)" />
        </div>
    </div>

    <br />
    <button class="btn btn-primary" type="submit">Aceptar</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

</EditForm>



@code {
    // Añadir un nuevo parámetro para el ID del Plan Vendido
    private int planVendidoId;
    private PUT_PlanVendidoDTO planVendido = new PUT_PlanVendidoDTO();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Inicializamos el planVendido con los datos del planVendidoId al cargar la página
        await Mostrar();
    }

    private async Task Mostrar()
    {
        if (planVendidoId > 0) // Verificamos si el ID es válido
        {
            var respuesta = await http.Get<PUT_PlanVendidoDTO>($"api/PlanVendido/{planVendidoId}");
            if (!respuesta.Error)
            {
                planVendido = respuesta.Respuesta; // Asignamos los datos al DTO
            }
            else
            {
                navigationManager.NavigateTo("/api/PlanVendido"); // Si no se encuentra el plan, redirigimos
            }
        }
    }

    private async Task Grabar()
    {
        // Al hacer clic en "Aceptar", enviamos los cambios a la API
        if (planVendidoId > 0)
        {
            var httpRespuesta = await http.Put<PUT_PlanVendidoDTO>($"api/PlanVendido/{planVendidoId}", planVendido);
            if (!httpRespuesta.Error)
            {
                // Si la actualización es exitosa, navegamos a la lista de Planes Vendidos
                navigationManager.NavigateTo("/api/PlanVendido");
            }
            else
            {
                errorMessage = await httpRespuesta.ObtenerError();
            }
        }
    }
}