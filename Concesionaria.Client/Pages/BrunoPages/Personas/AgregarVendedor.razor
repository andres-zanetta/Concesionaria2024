@page "/api/Vendedores/Crear"
@using Concesionaria2024.Shared.DTO.GinoDTO.Persona
@using Concesionaria2024.Shared.DTO.AndresDTO
@inject IHttpServicio http
@inject NavigationManager navigationManager

<div class="container d-flex justify-content-center align-items-start" style="min-height: 90vh; margin-top: 50px;">
    <div class="card border-0 shadow-lg" style="width: 500px; border-radius: 10px;">
        <!-- Encabezado -->
        <div class="card-header bg-primary text-white text-center py-4" style="border-top-left-radius: 10px; border-top-right-radius: 10px;">
            <h3 class="mb-0" style="font-weight: 600;">Registrar Vendedor</h3>
        </div>
        <div class="card-body p-4 bg-light">
            <EditForm Model="postPersona" OnValidSubmit="RegistrarPersona">
                <DataAnnotationsValidator />

                <!-- Nombre -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Nombre</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.Nombre" />
                    <ValidationMessage For="@(() => postPersona.Nombre)" class="text-danger" />
                </div>

                <!-- Apellido -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Apellido</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.Apellido" />
                    <ValidationMessage For="@(() => postPersona.Apellido)" class="text-danger" />
                </div>

                <!-- Número de Documento -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Número de Documento</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.NumDoc" />
                    <ValidationMessage For="@(() => postPersona.NumDoc)" class="text-danger" />
                </div>

                <!-- Tipo de Documento -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Tipo de Documento</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.TipoDocumentoId" />
                    <ValidationMessage For="@(() => postPersona.TipoDocumentoId)" class="text-danger" />
                </div>

                <!-- Dirección -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Dirección</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.Direccion" />
                    <ValidationMessage For="@(() => postPersona.Direccion)" class="text-danger" />
                </div>

                <!-- Teléfono -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Teléfono</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.Telefono" />
                    <ValidationMessage For="@(() => postPersona.Telefono)" class="text-danger" />
                </div>

                <!-- Email -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Email</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@postPersona.Email" />
                    <ValidationMessage For="@(() => postPersona.Email)" class="text-danger" />
                </div>

                <!-- Botón de Enviar -->
                <div class="text-center mt-4">
                    <button class="btn btn-primary btn-lg w-100 shadow" style="border-radius: 8px;">Registrar Persona</button>
                </div>
            </EditForm>

            @if (personaRegistrada)
            {
                <div class="mt-4">
                    <h5 class="text-center">Registrar como Vendedor</h5>
                    <EditForm Model="postVendedor" OnValidSubmit="RegistrarVendedor">
                        <DataAnnotationsValidator />

                        <!-- Número de Documento (bloqueado) -->
                        <div class="form-group mb-4">
                            <label class="form-label fw-bold text-secondary">Número de Documento</label>
                            <InputText class="form-control border-0 shadow-sm bg-light" style="border-radius: 8px;" @bind-Value="@postVendedor.NumDoc" readonly />
                        </div>

                        <!-- Botón de Enviar -->
                        <div class="text-center mt-4">
                            <button class="btn btn-success btn-lg w-100 shadow" style="border-radius: 8px;">Registrar como Vendedor</button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private POST_PersonaDTO postPersona = new POST_PersonaDTO();
    private POST_VendedorDTO postVendedor = new POST_VendedorDTO();
    private bool personaRegistrada = false;
    private string errorMessage = string.Empty; // Para mostrar mensajes de error

    private async Task RegistrarPersona()
    {
        try
        {
            var httpRespuesta = await http.Post<POST_PersonaDTO>("api/Clientes", postPersona);
            if (httpRespuesta.Error == null)
            {
                // Si la respuesta es exitosa, asignar el número de documento al DTO del vendedor
                postVendedor.NumDoc = postPersona.NumDoc;
                personaRegistrada = true;
            }
            else
            {
                // Si hubo un error en el registro de la persona, mostrar el mensaje
                errorMessage = "Hubo un error al registrar la persona. Intente de nuevo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al registrar persona: {ex.Message}";
        }
    }

    private async Task RegistrarVendedor()
    {
        try
        {
            var httpRespuesta = await http.Post<POST_VendedorDTO>("api/Vendedores", postVendedor);
            if (httpRespuesta.Error == null)
            {
                // Si el registro fue exitoso, redirigir al listado de vendedores
                navigationManager.NavigateTo("/api/Vendedores/Ver");
            }
            else
            {
                // Si hubo un error, mostrar el mensaje
                errorMessage = "Hubo un error al registrar el vendedor. Intente de nuevo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al registrar vendedor: {ex.Message}";
        }
    }
}


