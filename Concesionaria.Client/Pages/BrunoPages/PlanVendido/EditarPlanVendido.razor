@page "/api/PlanVendido/editar"
@inject IHttpServicio http
@inject NavigationManager navigationManager

<div class="container d-flex justify-content-center align-items-start" style="min-height: 90vh; margin-top: 50px;">
    <div class="card border-0 shadow-lg" style="width: 600px; border-radius: 10px;">
        <!-- Encabezado con fondo sólido y texto blanco -->
        <div class="card-header bg-primary text-white text-center py-4" style="border-top-left-radius: 10px; border-top-right-radius: 10px;">
            <h3 class="mb-0" style="font-weight: 600;">Editar Plan Vendido</h3>
        </div>
        <div class="card-body p-4 bg-light">
            <EditForm Model="planVendido" OnValidSubmit="Grabar">
                <DataAnnotationsValidator />

                <!-- Fecha de Suscripción -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Fecha de Suscripción</label>
                    <InputDate class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.FechaSuscripcion" />
                    <ValidationMessage For="@(() => planVendido.FechaSuscripcion)" class="text-danger" />
                </div>

                <!-- Fecha del Sorteo -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Fecha del Sorteo</label>
                    <InputDate class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.FechaSorteo" />
                    <ValidationMessage For="@(() => planVendido.FechaSorteo)" class="text-danger" />
                </div>

                <!-- Descripción -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Descripción</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.Descripcion" />
                    <ValidationMessage For="@(() => planVendido.Descripcion)" class="text-danger" />
                </div>

                <!-- Estado -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Estado</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.Estado" />
                    <ValidationMessage For="@(() => planVendido.Estado)" class="text-danger" />
                </div>

                <!-- Fecha Inicio -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Fecha Inicio</label>
                    <InputDate class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.FechaInicio" />
                    <ValidationMessage For="@(() => planVendido.FechaInicio)" class="text-danger" />
                </div>

                <!-- Fecha Fin -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Fecha Fin</label>
                    <InputDate class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.FechaFin" />
                    <ValidationMessage For="@(() => planVendido.FechaFin)" class="text-danger" />
                </div>

                <!-- Plan en Mora -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">¿El plan tiene mora?</label>
                    <InputCheckbox class="form-check-input shadow-sm" @bind-Value="@planVendido.PlanEnMora" />
                    <ValidationMessage For="@(() => planVendido.PlanEnMora)" class="text-danger" />
                </div>

                <!-- Tipo de Plan -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Tipo de Plan</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.TipoPlanId" />
                    <ValidationMessage For="@(() => planVendido.TipoPlanId)" class="text-danger" />
                </div>

                <!-- Vendedor -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Vendedor</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.VendedorId" />
                    <ValidationMessage For="@(() => planVendido.VendedorId)" class="text-danger" />
                </div>

                <!-- Cliente -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Cliente</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.ClienteId" />
                    <ValidationMessage For="@(() => planVendido.ClienteId)" class="text-danger" />
                </div>

                <!-- Adjudicación (Opcional) -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Adjudicación</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="@planVendido.AdjudicacionId" />
                    <ValidationMessage For="@(() => planVendido.AdjudicacionId)" class="text-danger" />
                </div>

                <!-- Botón de Enviar -->
                <div class="text-center mt-4">
                    <button class="btn btn-primary btn-lg w-100 shadow" style="border-radius: 8px;">Aceptar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    // Añadir un nuevo parámetro para el ID del Plan Vendido
    private int planVendidoId;
    private PUT_PlanVendidoDTO planVendido = new PUT_PlanVendidoDTO();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Inicializamos el planVendido con los datos del planVendidoId al cargar la página
        await Mostrar();
    }

    private async Task Mostrar()
    {
        if (planVendidoId > 0) // Verificamos si el ID es válido
        {
            var respuesta = await http.Get<PUT_PlanVendidoDTO>($"api/PlanVendido/{planVendidoId}");
            if (!respuesta.Error)
            {
                planVendido = respuesta.Respuesta; // Asignamos los datos al DTO
            }
            else
            {
                navigationManager.NavigateTo("/api/PlanVendido"); // Si no se encuentra el plan, redirigimos
            }
        }
    }

    private async Task Grabar()
    {
        // Al hacer clic en "Aceptar", enviamos los cambios a la API
        if (planVendidoId > 0)
        {
            var httpRespuesta = await http.Put<PUT_PlanVendidoDTO>($"api/PlanVendido/{planVendidoId}", planVendido);
            if (!httpRespuesta.Error)
            {
                // Si la actualización es exitosa, navegamos a la lista de Planes Vendidos
                navigationManager.NavigateTo("/api/PlanVendido");
            }
            else
            {
                errorMessage = await httpRespuesta.ObtenerError();
            }
        }
    }
}