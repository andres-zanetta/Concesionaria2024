@page "/api/TipoPlan/Gestion"
@using Concesionaria2024.Shared.DTO.FacundoDTO.Concesionaria2024.Shared.DTO.FacundoDTO
@using Concesionaria2024.Shared.DTO.FacundoDTO.TipoPlan
@using Concesionaria2024.Shared.DTO.FacundoDTO.Vehiculo
@inject IHttpServicio http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<div class="container d-flex justify-content-center align-items-start" style="min-height: 90vh; margin-top: 50px;">
    <div class="card border-0 shadow-lg" style="width: 500px; border-radius: 10px;">
        <div class="card-header bg-primary text-white text-center py-4" style="border-top-left-radius: 10px; border-top-right-radius: 10px;">
            <h3 class="mb-0" style="font-weight: 600;">Registrar Plan</h3>
        </div>
        <div class="card-body p-4 bg-light">
            <EditForm Model="nuevoTipoPlan" OnValidSubmit="RegistrarTipoPlan">
                <DataAnnotationsValidator />

                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Nombre del Plan</label>
                    <InputText class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="nuevoTipoPlan.NombrePlan" />
                    <ValidationMessage For="@(() => nuevoTipoPlan.NombrePlan)" class="text-danger" />
                </div>

                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Cantidad de Cuotas</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="nuevoTipoPlan.CantCuotas" />
                    <ValidationMessage For="@(() => nuevoTipoPlan.CantCuotas)" class="text-danger" />
                </div>

                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Valor Total</label>
                    <InputNumber class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="nuevoTipoPlan.ValorTotal" />
                    <ValidationMessage For="@(() => nuevoTipoPlan.ValorTotal)" class="text-danger" />
                </div>

                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Código del Vehículo</label>
                    <select class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind="nuevoTipoPlan.CodigoVehiculo">
                        <option value="" disabled selected>Seleccione un vehículo</option>
                        @foreach (var vehiculo in vehiculos)
                        {
                                <option value="@vehiculo.Codigo">@vehiculo.Codigo</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => nuevoTipoPlan.CodigoVehiculo)" class="text-danger" />
                </div>

                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-secondary">Descripción del Plan</label>
                    <InputTextArea class="form-control border-0 shadow-sm" style="border-radius: 8px;" @bind-Value="nuevoTipoPlan.Descripcion" />
                    <ValidationMessage For="@(() => nuevoTipoPlan.Descripcion)" class="text-danger" />
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary btn-lg w-100 shadow" style="border-radius: 8px;">Registrar Plan</button>
                </div>
            </EditForm>

            <div class="text-center mt-4">
                <button class="btn btn-outline-primary btn-lg w-100 shadow" style="border-radius: 8px;" @onclick="NavigateToMostrar">Volver al listado</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string codigo { get; set; }
    private POST_TipoPlanDTO nuevoTipoPlan = new POST_TipoPlanDTO();
    private string errorMessage = "";
    private List<GET_VehiculoDTO> vehiculos = new List<GET_VehiculoDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LeerVehiculos();
    }

    private async Task LeerVehiculos()
    {
        var resp = await http.Get<List<GET_VehiculoDTO>>("api/Vehiculos");
        if (!resp.Error)
        {
            vehiculos = resp.Respuesta;
        }
        else
        {
            errorMessage = await resp.ObtenerError();
        }
    }

    private async Task RegistrarTipoPlan()
    {
        try
        {
            var respuesta = await http.Post<POST_TipoPlanDTO>("api/TipoPlan", nuevoTipoPlan);
            if (!respuesta.Error)
            {
                navigationManager.NavigateTo("/api/TipoPlan/mostrar", true);
            }
            else
            {
                errorMessage = await respuesta.ObtenerError();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToMostrar()
    {
        navigationManager.NavigateTo("/api/TipoPlan/mostrar");
    }
}
