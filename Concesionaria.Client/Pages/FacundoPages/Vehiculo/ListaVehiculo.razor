@page "/api/vehiculos/lista"
@using Concesionaria2024.Shared.DTO.FacundoDTO.Concesionaria2024.Shared.DTO.FacundoDTO
@inject IHttpServicio http
@inject NavigationManager Navigation

<div class="container d-flex justify-content-center align-items-start" style="min-height: 90vh; margin-top: 50px;">
    <div class="card border-0 shadow-lg" style="width: 100%; border-radius: 10px;">
        <div class="card-header bg-primary text-white text-center py-4" style="border-top-left-radius: 10px; border-top-right-radius: 10px;">
            <h3 class="mb-0" style="font-weight: 600;">Listado de Vehículos</h3>
        </div>

        <div class="card-body p-4 bg-light">
            <h5 class="mb-4">Aquí podrás ver todos los vehículos registrados</h5>

            <div class="row">
                <div class="col-md-6">
                    <input type="text" class="form-control" placeholder="Buscar por marca" @bind="marcaFiltro" @oninput="FiltrarVehiculos" />
                </div>
                <div class="col-md-6">
                    <input type="text" class="form-control" placeholder="Buscar por código" @bind="codigoBusqueda" @oninput="FiltrarVehiculos" />
                </div>
            </div>

            <div class="my-3">
                <button class="btn btn-outline-info" @onclick="VerificarExistenciaPorCodigo">Verificar Existencia</button>
                @if (codigoExistente.HasValue)
                {
                    <div class="mt-2 text-success">
                        @if (codigoExistente.Value)
                        {
                            <span>El código existe en la base de datos.</span>
                        }
                        else
                        {
                            <span class="text-danger">El código no existe en la base de datos.</span>
                        }
                    </div>
                }
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Precio</th>
                        <th>Motor</th>
                        <th>Combustible</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Mensaje == "")
                    {
                        @if (listaVehiculos == null || !listaVehiculos.Any())
                        {
                            <tr><td colspan="6">No existen vehículos registrados.</td></tr>
                        }
                        else
                        {
                            @foreach (var vehiculo in listaVehiculos)
                            {
                                <tr>
                                    <td>@vehiculo.Codigo</td>
                                    <td>@vehiculo.Marca</td>
                                    <td>@vehiculo.Modelo</td>
                                    <td>@vehiculo.Precio.ToString("C")</td>
                                    <td>@vehiculo.Motor</td>
                                    <td>@vehiculo.Combustible</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr><td colspan="6">Error: @Mensaje</td></tr>
                    }
                </tbody>
            </table>

            <button @onclick="IrACrearVehiculo" class="btn btn-primary w-100 mt-3">Agregar Nuevo Vehículo</button>
            <button @onclick="IrAEditarVehiculo" class="btn btn-outline-primary w-100 mt-3">Editar Vehículos</button>
        </div>
    </div>
</div>

@code {
    List<GET_VehiculoDTO> listaVehiculos = new();
    string Mensaje = "";
    string marcaFiltro = "";
    string codigoBusqueda = "";
    bool? codigoExistente = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerVehiculos();
    }

    private async Task LeerVehiculos()
    {
        var resp = await http.Get<List<GET_VehiculoDTO>>("api/Vehiculos");
        if (!resp.Error)
        {
            listaVehiculos = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task FiltrarVehiculos()
    {
        var filtroMarca = marcaFiltro.Trim().ToLower();
        var filtroCodigo = codigoBusqueda.Trim().ToLower();

        if (string.IsNullOrEmpty(filtroMarca) && string.IsNullOrEmpty(filtroCodigo))
        {
            await LeerVehiculos();
        }
        else
        {
            listaVehiculos = listaVehiculos
                .Where(v => (string.IsNullOrEmpty(filtroMarca) || v.Marca.ToLower().Contains(filtroMarca)) &&
                            (string.IsNullOrEmpty(filtroCodigo) || v.Codigo.ToLower().Contains(filtroCodigo)))
                .ToList();
        }
    }

    private async Task VerificarExistenciaPorCodigo()
    {
        if (string.IsNullOrEmpty(codigoBusqueda))
        {
            codigoExistente = null;
            return;
        }

        var resp = await http.Get<bool>($"api/Vehiculos/existe/{codigoBusqueda}");
        if (!resp.Error)
        {
            codigoExistente = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private void IrACrearVehiculo()
    {
        Navigation.NavigateTo("/api/vehiculos/crear");
    }

    private void IrAEditarVehiculo()
    {
        Navigation.NavigateTo("/api/vehiculos/editar");
    }
}
